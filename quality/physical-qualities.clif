// the basic idea here is to show we can do some v basic axiomatization of units that is
// [1] compatible with BFO's theory of qualities
// [2] allows us to represent standard mind-independent physical relationships without recourse to measurements

// ****************************************
// BFO AXIOMS
// ****************************************

// we use the predicate 'measurable_type' for want of a better name to express the union of TemporalRegion and Quality.
// it is intended that this theory be independent of measurements, so maybe a better predicate name is in order?
// note that in BFO universals are in the domain-of-discourse, to it's fine to have predicates that take universals as arguments.
(forall (U)
	(if (measurable_type U)
	    (forall (i t)
		    (if (instance_of i U t)
			(or (instance_of i bfo:Quality t)
			    (instance_of i bfo:TemporalRegion t))))))

// ****************************************
// PHYSICAL QUALITY AXIOMS
// ****************************************

// note - these symbols do not denote their arithmetic equivalents. the domain and range are quality universals or bfo:TemporalRegions
// (hey, so maybe we should use a different symbol)
(function /)
(function *)

// domain and range are measurable
(forall (a b c)
	(if (= c (/ a b))
	    (and (measurable_type a)
		 (measurable_type b)
		 (measurable_type c))))


// a/b=c <=> a=b*c
(forall (c a b)
	(iff (= c (/ a b))
	     (= a (* b c))))

// multiplication is symmetric
(forall (c a b)
	(iff (= c (* a b))
	     (= c (* b a))))

// e.g if rho = m/V and qa is an instance of some pato:mass and qb is an instance of some pato:volume, and
// both inhere in the same bearer, then there must exist a qc that instantiates rho in the same bearer
(forall (C A B qa qb bearer t)
	(if (and (= C (/ A B))
		 (instance_of qa A t)
		 (instance_of qb B t)
		 (inheres_in qa bearer t)
		 (inheres_in qb bearer t))
	    (exists (qc)
		    (and (instance_of qc C t)
			 (inheres_in qc bearer t)))))

// units are just special kinds of subtypes;
// e.g. 1_kg is a subtype of pato:mass instantiated by all 1_kg-bearing entities in the universe at t
(forall (u q)
	(if (unit_of u q)
	    (is_a u q)))

// e.g. if pato:mass is a deteminable then any bearer can only have 1 pato:mass at any time
(forall (Q)
	(if (determinable Q)
	    (forall (q e t)
		    (if (inheres_in q e t)
			(not (exists (q2)
				     (and (inheres_in q2 e t)
					  (not (= q q2)))))))))

(= m (* 100 cm))
// TODO:
// to represent m = 100 cm we can have some kind macro or semi
// higher order theorem that turns the above into:
//forall q,x,t
//       if q instance_of m at t, and q inheres_in x at t
//       then there exists x1, x2, ..., x100 such that:
//       	    x1, .. x100 are all different and
//       	    x1, .. x100 are each part_of x at t and
//       	    x1, .. x100 are all spatially disjoint and
//	    there is no part of x that is not part of x1, ... x100 and
//	    there exists q1, q2, ..., q100 such that
//	       q1 inheres_in x1, ..., q100 inheres_in x100 and
//	       q1 instance_of cm at t, ..., q100 instance_of cm at t


// ****************************************
// PATO / UO AXIOMS
// ****************************************
// mireot
(is_a pato:mass bfo:Quality)
(is_a pato:volume bfo:Quality)
(is_a pato:density bfo:Quality)

(determinable pato:mass)
(determinable pato:volume)
(determinable pato:density)

(unit_of 1_kg pato:mass)
(unit_of 1_m^3 pato:volume)
(unit_of 1_kg_per_m^3 pato:density)

// these are not MIREOTed in from PATO/UO, but they do extend the theory

// rho = m/V
// this should be represented in PATO somehow
(= pato:density (/ pato:mass pato:volume))

// kg/m^3 = kg / m^3
// this should be represented in UO somehow.
// note that whilst the *label* "1_kg" is a human-created artefact we take the position that the
// subtype of pato:mass (that happens to be called "1_kg" and happens to be defined as blah blah water meter)
// exists independenly of humans and human measurements, and the equivalence predicate below expresses
// something about that mind-independent universe
(= 1_kg_per_m^3 (/ 1_kg 1_m^3))

// the following are perhaps BFO rather than PATO axioms..
// .. but they refer to pato qualities so we put em here... it's all interdependent..

// every material entity has pato:mass
(forall (i t)
	(if (instance_of i bfo:material_entity t)
	    (exists (q)
		    (and (instance_of q pato:mass t)
			 (inheres_in q i t)))))

// every material entity has pato:volume
(forall (i t)
	(if (instance_of i bfo:material_entity t)
	    (exists (q)
		    (and (instance_of q pato:volume t)
			 (inheres_in q i t)))))

// ****************************************
// BASIC RO AXIOMS
// ****************************************
// these would be imported but we MIREOT some in here, just enough to prove what we need

(forall (X Y Z)
	(if (and (is_a X Y)
		 (is_a Y Z))
	    (is_a X Z)))

(forall (i X Y t)
	(if (and (instance_of i X t)
		 (is_a X Y))
	    (instance_of i Y t)))

// ****************************************
// FMA
// ****************************************
// just for testing purposes we MIREOT in a super-minimal subset of FMA
(is_a fma:bone bfo:material_entity)


// ****************************************
// TESTS
// ****************************************
// cltools clif-to-p9 translator treats these as goals to be proved:
// Example of use:
// clif-to-prover9 quality/physical-qualities.clif  -t test-1 | prover9
// also see the corresponding .p9 files

// very basic dimensional analysis test
(cl-comment "test-1" (= pato:mass (* pato:density pato:volume)))
(cl-comment "test-1" (= pato:mass (* pato:volume pato:density)))

(cl-comment "test-n1a" (not (= pato:mass (/ pato:volume pato:density))))
(cl-comment "test-n1b" (not (= pato:volume (* pato:mass pato:density))))

// check that all bones have pato:density
// (follows from [a] all bones have pato:mass and pato:volume and [b]
//  if something has pato:mass and pato:volume then it has pato:density)
(cl-comment "test-2" 
	    (if (instance_of bone1 fma:bone t1)
		(exists (q)
			(and (instance_of q pato:density t1)
			     (inheres_in q bone1 t1)))))

// test basic RO axioms
(cl-comment "test-3" 
	    (if (instance_of bone1 fma:bone t1)
		(instance_of bone1 bfo:material_entity t1)))

// if a bone exists and that bone has a pato:mass that is an instance
// of "1_kg" and has a pato:volume that is an instance of "1_m^3", then
// it has a pato:density of "1_kg_per_m^3". (yeh, ok, this is a pretty odd bone).
// OK, so this is as far as we go for now.
// Not that impressive yet as we obviously want to deal with all those
// entities that don't happen to instantiate 1_kg exactly...
// We could do more with
// some crazy Peano-axioms but it may be easier to just use FOL enhanced
// with some basic arithmetic axioms...
// ...already this takes ~500 steps and a few seconds to prove...
(cl-comment "test-4" 
	    (if (and (instance_of bone1 fma:bone t1)
		     (inheres_in bone1mass bone1 t1)
		     (inheres_in bone1volume bone1 t1)
		     (instance_of bone1mass 1_kg t1)
		     (instance_of bone1volume 1_m^3 t1)
		     )
		(exists (q)
			(and (inheres_in q bone1 t1)
			     (instance_of q 1_kg_per_m^3 t1)))))

			

